// Generated by CoffeeScript 1.4.0
(function() {
  var ComponentLoader, fs, internalSocket, log, path, reader, _;

  reader = require('read-installed');

  _ = require('underscore')._;

  path = require('path');

  fs = require('fs');

  internalSocket = require('./InternalSocket');

  require('coffee-script');

  log = require('npmlog');

  log.pause();

  ComponentLoader = (function() {

    function ComponentLoader(baseDir) {
      this.baseDir = baseDir;
      this.components = null;
      this.checked = [];
    }

    ComponentLoader.prototype.getModulePrefix = function(name) {
      if (!name) {
        return '';
      }
      return name.replace('noflo-', '');
    };

    ComponentLoader.prototype.getModuleComponents = function(moduleDef) {
      var components, prefix,
        _this = this;
      components = {};
      this.checked.push(moduleDef.name);
      prefix = this.getModulePrefix(moduleDef.name);
      _.each(moduleDef.dependencies, function(def) {
        var depComponents;
        if (_this.checked.indexOf(def.name) !== -1) {
          return;
        }
        depComponents = _this.getModuleComponents(def);
        if (_.isEmpty(depComponents)) {
          return;
        }
        return _.each(depComponents, function(cPath, name) {
          return components[name] = cPath;
        });
      });
      if (!moduleDef.noflo) {
        return components;
      }
      if (moduleDef.noflo.components) {
        _.each(moduleDef.noflo.components, function(cPath, name) {
          return components["" + prefix + "/" + name] = path.resolve(moduleDef.realPath, cPath);
        });
      }
      if (moduleDef.noflo.graphs) {
        _.each(moduleDef.noflo.graphs, function(gPath, name) {
          return components["" + prefix + "/" + name] = path.resolve(moduleDef.realPath, gPath);
        });
      }
      return components;
    };

    ComponentLoader.prototype.listComponents = function(callback) {
      var corePath,
        _this = this;
      if (this.components !== null) {
        return callback(this.components);
      }
      corePath = path.resolve(__dirname, '../src/components');
      return fs.readdir(corePath, function(err, components) {
        var coreComponents;
        coreComponents = {};
        _.each(components, function(component) {
          var componentExtension, componentName, _ref;
          if (component.substr(0, 1) === '.') {
            return;
          }
          _ref = component.split('.'), componentName = _ref[0], componentExtension = _ref[1];
          if (componentExtension !== 'coffee') {
            return;
          }
          return coreComponents[componentName] = "" + corePath + "/" + component;
        });
        return reader(_this.baseDir, function(err, data) {
          if (err) {
            return callback(err, data);
          }
          _this.components = _.extend(coreComponents, _this.getModuleComponents(data));
          return callback(_this.components);
        });
      });
    };

    ComponentLoader.prototype.isGraph = function(path) {
      return path.indexOf('.fbp') !== -1 || path.indexOf('.json') !== -1;
    };

    ComponentLoader.prototype.load = function(name, callback) {
      var implementation,
        _this = this;
      if (!this.components) {
        this.listComponents(function(components) {
          return _this.load(name, callback);
        });
        return;
      }
      if (!this.components[name]) {
        throw new Error("Component " + name + " not available");
        return;
      }
      if (this.isGraph(this.components[name])) {
        process.nextTick(function() {
          return _this.loadGraph(name, callback);
        });
        return;
      }
      implementation = require(this.components[name]);
      return callback(implementation.getComponent());
    };

    ComponentLoader.prototype.loadGraph = function(name, callback) {
      var graph, graphImplementation, graphSocket;
      graphImplementation = require(this.components['Graph']);
      graphSocket = internalSocket.createSocket();
      graph = graphImplementation.getComponent();
      graph.inPorts.graph.attach(graphSocket);
      graphSocket.send(this.components[name]);
      graphSocket.disconnect();
      delete graph.inPorts.graph;
      return callback(graph);
    };

    return ComponentLoader;

  })();

  exports.ComponentLoader = ComponentLoader;

}).call(this);
