(function() {
  var ComponentLoader;

  ComponentLoader = (function() {
    function ComponentLoader(baseDir) {
      this.baseDir = baseDir;
      this.components = null;
      this.checked = [];
      this.revalidate = false;
    }

    ComponentLoader.prototype.getModulePrefix = function(name) {
      if (!name) {
        return '';
      }
      if (name === 'noflo') {
        return '';
      }
      return name.replace('noflo-', '');
    };

    ComponentLoader.prototype.getModuleComponents = function(moduleName) {
      var cPath, definition, dependency, e, name, prefix, _ref, _results;

      if (this.checked.indexOf(moduleName) !== -1) {
        return;
      }
      this.checked.push(moduleName);
      try {
        definition = require("/" + moduleName + "/component.json");
      } catch (_error) {
        e = _error;
        return;
      }
      for (dependency in definition.dependencies) {
        this.getModuleComponents(dependency.replace('/', '-'));
      }
      if (!definition.noflo) {
        return;
      }
      prefix = this.getModulePrefix(definition.name);
      if (definition.noflo.components) {
        _ref = definition.noflo.components;
        _results = [];
        for (name in _ref) {
          cPath = _ref[name];
          _results.push(this.registerComponent(prefix, name, "/" + moduleName + "/" + cPath));
        }
        return _results;
      }
    };

    ComponentLoader.prototype.listComponents = function(callback) {
      if (this.components !== null) {
        return callback(this.components);
      }
      this.components = {};
      this.getModuleComponents(this.baseDir);
      return callback(this.components);
    };

    ComponentLoader.prototype.load = function(name, callback) {
      var implementation, instance,
        _this = this;

      if (!this.components) {
        this.listComponents(function(components) {
          return _this.load(name, callback);
        });
        return;
      }
      if (!this.components[name]) {
        throw new Error("Component " + name + " not available");
        return;
      }
      if (this.isGraph(this.components[name])) {
        process.nextTick(function() {
          return _this.loadGraph(name, callback);
        });
        return;
      }
      implementation = require(this.components[name]);
      instance = implementation.getComponent();
      if (name === 'Graph') {
        instance.baseDir = this.baseDir;
      }
      return callback(instance);
    };

    ComponentLoader.prototype.isGraph = function(cPath) {
      return false;
    };

    ComponentLoader.prototype.registerComponent = function(packageId, name, cPath, callback) {
      var fullName, prefix;

      prefix = this.getModulePrefix(packageId);
      fullName = "" + prefix + "/" + name;
      if (!packageId) {
        fullName = name;
      }
      this.components[fullName] = cPath;
      if (callback) {
        return callback();
      }
    };

    ComponentLoader.prototype.registerGraph = function(packageId, name, gPath, callback) {
      return this.registerComponent(packageId, name, gPath, callback);
    };

    ComponentLoader.prototype.clear = function() {
      this.components = null;
      this.checked = [];
      return this.revalidate = true;
    };

    return ComponentLoader;

  })();

  exports.ComponentLoader = ComponentLoader;

}).call(this);
