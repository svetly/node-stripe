// Generated by CoffeeScript 1.4.0
(function() {
  var express, noflo, nofloRoot, path, prepareEdge, prepareNetwork, prepareNode, preparePort;

  express = require("express");

  noflo = require("./NoFlo");

  path = require("path");

  nofloRoot = path.normalize("" + __dirname + "/..");

  prepareNetwork = function(network, id) {
    var cleanNetwork, combined, edge, index, name, node, _i, _len, _ref;
    cleanNetwork = {
      id: id,
      name: network.graph.name,
      started: network.startupDate,
      nodes: [],
      edges: []
    };
    _ref = network.graph.nodes;
    for (name in _ref) {
      node = _ref[name];
      cleanNetwork.nodes.push(prepareNode(node, network));
    }
    combined = network.graph.edges.concat(network.graph.initializers);
    for (index = _i = 0, _len = combined.length; _i < _len; index = ++_i) {
      edge = combined[index];
      cleanNetwork.edges.push(prepareEdge(edge, index));
    }
    return cleanNetwork;
  };

  prepareNode = function(node, network) {
    var cleanNode, name, port, process, _ref, _ref1;
    process = network.getNode(node.id);
    cleanNode = {
      id: node.id,
      cleanId: node.id.replace(" ", "_"),
      display: node.display,
      inPorts: [],
      outPorts: []
    };
    _ref = process.component.inPorts;
    for (name in _ref) {
      port = _ref[name];
      cleanNode.inPorts.push(preparePort(port, name));
    }
    _ref1 = process.component.outPorts;
    for (name in _ref1) {
      port = _ref1[name];
      cleanNode.outPorts.push(preparePort(port, name));
    }
    return cleanNode;
  };

  prepareEdge = function(edge, index) {
    var cleanEdge;
    cleanEdge = {
      id: index + 1,
      to: edge.to,
      from: edge.from
    };
    cleanEdge.to.cleanNode = edge.to.node.replace(" ", "_");
    if (edge.from.node) {
      cleanEdge.from.cleanNode = edge.from.node.replace(" ", "_");
    }
    return cleanEdge;
  };

  preparePort = function(port, name) {
    var cleanPort;
    cleanPort = {
      name: name,
      type: "single"
    };
    if (port instanceof noflo.ArrayPort) {
      cleanPort.type = "array";
    }
    return cleanPort;
  };

  exports.createServer = function(port, success) {
    var app, sourceDir, staticDir;
    staticDir = "" + nofloRoot + "/server/static";
    sourceDir = "" + nofloRoot + "/server/src";
    app = express.createServer();
    app.networks = [];
    app.use(express.compiler({
      src: sourceDir,
      dest: staticDir,
      enable: ['coffeescript']
    }));
    app.use(express["static"](staticDir));
    app.use(express.bodyParser());
    app.set("view engine", "jade");
    app.set("view options", {
      layout: false
    });
    app.set("views", "" + nofloRoot + "/server/views");
    app.get("/", function(req, res) {
      return res.render("application", {});
    });
    app.get("/network", function(req, res) {
      var id, network, results, _i, _len, _ref;
      results = [];
      _ref = app.networks;
      for (id = _i = 0, _len = _ref.length; _i < _len; id = ++_i) {
        network = _ref[id];
        results.push(prepareNetwork(network, id));
      }
      return res.send(results);
    });
    app.param("network_id", function(req, res, next, id) {
      if (!app.networks[id]) {
        return res.send("No network '" + id + "' found", 404);
      }
      req.network = prepareNetwork(app.networks[id], id);
      return next();
    });
    app.param("node_id", function(req, res, next, id) {
      var node, _i, _len, _ref;
      _ref = req.network.nodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        if (id !== node.id) {
          continue;
        }
        req.node = node;
        return next();
      }
      return res.send("No node '" + id + "' found", 404);
    });
    app.param("edge_id", function(req, res, next, id) {
      var index;
      index = id - 1;
      if (!req.network.edges[index]) {
        return res.send("No edge '" + id + "' found", 404);
      }
      req.edge = req.network.edges[index];
      return next();
    });
    app.get("/network/:network_id", function(req, res) {
      return res.send(req.network);
    });
    app.get("/network/:network_id/node", function(req, res) {
      return res.send(req.network.nodes);
    });
    app.post("/network/:network_id/node", function(req, res) {
      if (!(req.body.id && req.body.component)) {
        return res.send("Missing ID or component definition", 422);
      }
      app.networks[req.network.id].graph.addNode(req.body.id, req.body.component);
      res.header("Location", "/network/" + req.params.network_id + "/node/" + req.body.id);
      return res.send(null, 201);
    });
    app.get("/network/:network_id/node/:node_id", function(req, res) {
      return res.send(req.node);
    });
    app.put("/network/:network_id/node/:node_id", function(req, res) {
      var index, node, _i, _len, _ref;
      if (req.body.display) {
        _ref = app.networks[req.network.id].graph.nodes;
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          node = _ref[index];
          if (node.id !== req.node.id) {
            continue;
          }
          node.display = req.body.display;
          req.node = prepareNode(node, app.networks[req.network.id]);
        }
      }
      return res.send(req.node);
    });
    app["delete"]("/network/:network_id/node/:node_id", function(req, res) {
      app.networks[req.network.id].graph.removeNode(req.node.id);
      return res.send(req.node);
    });
    app.get("/network/:network_id/edge", function(req, res) {
      return res.send(req.network.edges);
    });
    app.post("/network/:network_id/edge", function(req, res) {
      if (!req.body.to) {
        return res.send("Missing target for connection", 422);
      }
      if (!req.body.to.node) {
        return res.send("Missing target node", 422);
      }
      if (!req.body.to.port) {
        return res.send("Missing target port", 422);
      }
      if (req.body.data) {
        app.networks[req.network.id].graph.addInitial(req.body.data, req.body.to.node, req.body.to.process);
        return res.send(null, 201);
      }
      if (!req.body.from) {
        return res.send("Missing source for connection", 422);
      }
      if (!req.body.from.node) {
        return res.send("Missing source node", 422);
      }
      if (!req.body.from.port) {
        return res.send("Missing source port", 422);
      }
      app.networks[req.network.id].addEdge(req.body.from.node, req.body.from.port, req.body.to.node, req.body.to.port);
      return res.send(null, 201);
    });
    app.get("/network/:network_id/edge/:edge_id", function(req, res) {
      return res.send(req.edge);
    });
    app["delete"]("/network/:network_id/edge/:edge_id", function(req, res) {
      if (req.edge.from) {
        app.networks[req.network.id].graph.removeEdge(req.edge.from.node, req.edge.from.port);
        return res.send(req.edge);
      }
      app.networks[req.network.id].graph.removeEdge(req.edge.to.node, req.edge.to.port);
      return res.send(req.edge);
    });
    return app.listen(port, null, function() {
      return success(app);
    });
  };

}).call(this);
