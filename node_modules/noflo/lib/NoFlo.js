(function() {
  var LoggingComponent, Network, arrayport, asynccomponent, component, componentLoader, graph, internalSocket, port;

  internalSocket = require("./InternalSocket");

  component = require("./Component");

  asynccomponent = require("./AsyncComponent");

  port = require("./Port");

  arrayport = require("./ArrayPort");

  graph = require("./Graph");

  Network = require("./Network").Network;

  LoggingComponent = require("./LoggingComponent").LoggingComponent;

  if (typeof process === 'object' && process.title === 'node') {
    componentLoader = require("./nodejs/ComponentLoader");
  } else {
    componentLoader = require('./ComponentLoader');
  }

  exports.createNetwork = function(graph, callback) {
    var network, networkReady;

    network = new Network(graph);
    networkReady = function(network) {
      if (callback != null) {
        callback(network);
      }
      return network.sendInitials();
    };
    if (graph.nodes.length === 0) {
      setTimeout(function() {
        return networkReady(network);
      }, 0);
      return network;
    }
    network.loader.listComponents(function() {
      return network.connect(function() {
        return networkReady(network);
      });
    });
    return network;
  };

  exports.loadFile = function(file, callback) {
    return graph.loadFile(file, function(net) {
      return exports.createNetwork(net, callback);
    });
  };

  exports.saveFile = function(graph, file, callback) {
    return graph.save(file, function() {
      return callback(file);
    });
  };

  exports.Component = component.Component;

  exports.ComponentLoader = componentLoader.ComponentLoader;

  exports.AsyncComponent = asynccomponent.AsyncComponent;

  exports.LoggingComponent = LoggingComponent;

  exports.Port = port.Port;

  exports.ArrayPort = arrayport.ArrayPort;

  exports.Graph = graph.Graph;

  exports.Network = Network;

  exports.graph = graph;

  exports.internalSocket = internalSocket;

}).call(this);
