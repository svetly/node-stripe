(function() {
  var model, nofloClient, view;

  model = {};

  view = {};

  model.Network = Backbone.Model.extend({
    defaults: {
      nodes: null
    },
    url: function() {
      return "/network/" + this.id;
    },
    initialize: function(attributes) {
      var _ref;
      if (attributes == null) {
        attributes = {};
      }
      if (attributes.nodes == null) {
        attributes.nodes = [];
      }
      return (_ref = attributes.edges) != null ? _ref : attributes.edges = [];
    },
    set: function(attributes) {
      if (attributes.nodes) {
        attributes.nodes = new model.Nodes(attributes.nodes, {
          network: this
        });
      }
      if (attributes.edges) {
        attributes.edges = new model.Edges(attributes.edges, {
          network: this
        });
      }
      return Backbone.Model.prototype.set.call(this, attributes);
    }
  });

  model.Networks = Backbone.Collection.extend({
    model: model.Network,
    url: "/network"
  });

  model.Node = Backbone.Model.extend({
    defaults: {
      component: "",
      inPorts: null,
      outPorts: null,
      display: {
        x: null,
        y: null
      }
    },
    initialize: function(attributes) {
      var _ref;
      if (attributes == null) {
        attributes = {};
      }
      if (attributes.inPorts == null) {
        attributes.inPorts = [];
      }
      return (_ref = attributes.outPorts) != null ? _ref : attributes.outPorts = [];
    },
    set: function(attributes) {
      if (attributes.inPorts) {
        attributes.inPorts = new model.NodePorts(attributes.inPorts, {
          node: this
        });
      }
      if (attributes.outPorts) {
        attributes.outPorts = new model.NodePorts(attributes.outPorts, {
          node: this
        });
      }
      return Backbone.Model.prototype.set.call(this, attributes);
    },
    url: function() {
      return "" + (this.collection.url()) + "/" + this.id;
    }
  });

  model.Nodes = Backbone.Collection.extend({
    model: model.Node,
    network: null,
    initialize: function(models, options) {
      return this.network = options != null ? options.network : void 0;
    },
    url: function() {
      return "/network/" + this.network.id + "/node";
    }
  });

  model.Port = Backbone.Model.extend({
    node: null,
    defaults: {
      type: "",
      name: "",
      data: null
    }
  });

  model.NodePorts = Backbone.Collection.extend({
    model: model.Port,
    node: null,
    initialize: function(models, options) {
      return this.node = options != null ? options.node : void 0;
    }
  });

  model.Edge = Backbone.Model.extend({
    defaults: {
      data: null,
      from: null,
      to: null
    },
    url: function() {
      return "" + (this.collection.url()) + "/" + this.id;
    }
  });

  model.Edges = Backbone.Collection.extend({
    model: model.Edge,
    network: null,
    initialize: function(models, options) {
      return this.network = options != null ? options.network : void 0;
    },
    url: function() {
      return "/network/" + this.network.id + "/edge";
    }
  });

  view.Networks = Backbone.View.extend({
    app: null,
    initialize: function(options) {
      return this.app = options != null ? options.app : void 0;
    },
    render: function() {
      var app, element;
      element = jQuery(this.el);
      element.empty();
      app = this.app;
      this.collection.each(function(network) {
        var networkElement;
        networkElement = jQuery('<div></div>').html(network.get('name'));
        networkElement.click(function() {
          return app.navigate("#/" + network.id, {
            trigger: true
          });
        });
        return element.append(networkElement);
      });
      return this;
    }
  });

  view.Network = Backbone.View.extend({
    nodeViews: null,
    initialize: function() {
      var _this = this;
      this.nodeViews = {};
      this.model.get('nodes').each(function(node) {
        return _this.nodeViews[node.id] = new view.Node({
          model: node,
          tagName: 'div'
        });
      });
      this.edgeViews = [];
      return this.model.get('edges').each(function(edge) {
        return _this.edgeViews.push(new view.Edge({
          model: edge,
          networkView: _this
        }));
      });
    },
    render: function() {
      var element,
        _this = this;
      document.onselectstart = function() {
        return false;
      };
      jsPlumb.Defaults.Connector = "Bezier";
      jsPlumb.Defaults.PaintStyle = {
        strokeStyle: "#5c3566",
        lineWidth: 6
      };
      jsPlumb.Defaults.DragOptions = {
        cursor: "pointer",
        zIndex: 2000
      };
      jsPlumb.setRenderMode(jsPlumb.CANVAS);
      element = jQuery(this.el);
      element.empty();
      element.append(jQuery("<header><h1>" + (this.model.get('name')) + "</h1><div id='uptime'></div>"));
      jQuery('#uptime').countdown({
        since: new Date(this.model.get('started')),
        format: 'YOWDHM',
        significant: 2
      });
      _(this.nodeViews).each(function(nodeView) {
        element.append(nodeView.render().el);
        return nodeView.renderPorts();
      });
      _(this.edgeViews).each(function(edgeView) {
        return edgeView.renderConnection();
      });
      jsPlumb.bind('jsPlumbConnection', function(info) {
        return console.log("ATTACH", info);
      });
      jsPlumb.bind('jsPlumbConnectionDetached', function(info) {
        var edgeView, _i, _len, _ref, _results;
        _ref = _this.edgeViews;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          edgeView = _ref[_i];
          if (edgeView.connection !== info.connection) {
            continue;
          }
          console.log("DETACH", edgeView.model);
          _results.push(edgeView.model.destroy({
            success: function() {
              return console.log("CONNECTION DELETED");
            },
            error: function() {
              return console.log("FAILED TO DELETE CONNECTION");
            }
          }));
        }
        return _results;
      });
      return this;
    }
  });

  view.Node = Backbone.View.extend({
    inAnchors: ["LeftMiddle", "TopLeft", "BottomLeft"],
    outAnchors: ["RightMiddle", "TopRight", "BottonRight"],
    inEndpoints: null,
    outEndpoints: null,
    initialize: function(options) {
      this.inEndpoints = {};
      return this.outEndpoints = {};
    },
    render: function() {
      var element,
        _this = this;
      element = jQuery(this.el);
      element.empty();
      element.addClass('component');
      element.css('top', this.model.get('display').x);
      element.css('left', this.model.get('display').y);
      element.html(this.model.id);
      jsPlumb.draggable(this.el, {
        stop: function(event, data) {
          _this.model.set({
            display: {
              x: data.offset.top,
              y: data.offset.left
            }
          });
          return _this.model.save({
            success: function() {
              return console.log("SUCCESS");
            },
            error: function() {
              return console.log("ERROR");
            }
          });
        }
      });
      return this;
    },
    renderPorts: function() {
      var nodeView;
      nodeView = this;
      this.model.get('inPorts').each(function(port, index) {
        var inPortView;
        inPortView = new view.Port({
          model: port,
          inPort: true,
          nodeView: nodeView,
          anchor: nodeView.inAnchors[index]
        });
        inPortView.render();
        return nodeView.inEndpoints[port.get('name')] = inPortView.endPoint;
      });
      this.model.get('outPorts').each(function(port, index) {
        var outPortView;
        outPortView = new view.Port({
          model: port,
          inPort: false,
          nodeView: nodeView,
          anchor: nodeView.outAnchors[index]
        });
        outPortView.render();
        return nodeView.outEndpoints[port.get('name')] = outPortView.endPoint;
      });
      return this;
    }
  });

  view.Port = Backbone.View.extend({
    endPoint: null,
    inPort: false,
    anchor: "LeftMiddle",
    portDefaults: {
      endpoint: [
        'Dot', {
          radius: 6
        }
      ],
      paintStyle: {
        fillStyle: '#75507b'
      }
    },
    initialize: function(options) {
      this.endPoint = null;
      this.nodeView = options != null ? options.nodeView : void 0;
      this.inPort = options != null ? options.inPort : void 0;
      return this.anchor = options != null ? options.anchor : void 0;
    },
    render: function() {
      var portOptions;
      if (this.endPoint) {
        return this;
      }
      portOptions = {
        isSource: true,
        isTarget: false,
        maxConnections: 1,
        anchor: this.anchor,
        overlays: [
          [
            "Label", {
              location: [2.5, -0.5],
              label: this.model.get('name')
            }
          ]
        ]
      };
      if (this.inPort) {
        portOptions.isSource = false;
        portOptions.isTarget = true;
        portOptions.overlays[0][1].location = [-1.5, -0.5];
      }
      if (this.model.get('type') === 'array') {
        portOptions.maxConnections = -1;
      }
      this.endPoint = jsPlumb.addEndpoint(this.nodeView.el, portOptions, this.portDefaults);
      return this;
    }
  });

  view.Edge = Backbone.View.extend({
    networkView: null,
    connection: null,
    initialize: function(options) {
      return this.networkView = options != null ? options.networkView : void 0;
    },
    render: function() {
      return this;
    },
    renderConnection: function() {
      var source, target;
      if (!this.model.get('from').node) {
        return;
      }
      source = this.model.get('from');
      target = this.model.get('to');
      return this.connection = jsPlumb.connect({
        source: this.networkView.nodeViews[source.node].outEndpoints[source.port],
        target: this.networkView.nodeViews[target.node].inEndpoints[target.port]
      });
    }
  });

  nofloClient = Backbone.Router.extend({
    networks: null,
    routes: {
      '': 'index',
      '/:network': 'network'
    },
    initialize: function(options) {
      this.networks = new model.Networks([]);
      return this.networks.fetch(options);
    },
    index: function() {
      var _this = this;
      this.networks = new model.Networks([]);
      return this.networks.fetch({
        success: function(networks) {
          var networksView;
          networksView = new view.Networks({
            app: _this,
            collection: networks,
            el: jQuery('#noflo')
          });
          return networksView.render();
        }
      });
    },
    network: function(id) {
      var network;
      network = this.networks.get(id);
      return network.fetch({
        success: function() {
          var networkView;
          networkView = new view.Network({
            model: network,
            el: jQuery('#noflo')
          });
          return networkView.render();
        }
      });
    }
  });

  jsPlumb.bind("ready", function() {
    var app;
    return app = new nofloClient({
      success: function() {
        return Backbone.history.start();
      },
      error: function() {
        return jQuery('#noflo').empty().append(jQuery('<div>Failed to fetch networks</div>'));
      }
    });
  });

}).call(this);
