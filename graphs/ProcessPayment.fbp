# Input ports
EXPORT=APIKEY.IN:APIKEY
EXPORT=CUSTOMER.IN:CUSTOMERDATA
EXPORT=CHARGE.DATA:CHARGEDATA

# Output ports
EXPORT=CHARGEDONE.OUT:CHARGE
EXPORT=ERRORS.OUT:ERROR

# Give the Stripe API key
ApiKey(Split) OUT -> APIKEY DoCharge(stripe/CreateCharge)
ApiKey() OUT -> APIKEY Customer(stripe/CreateCustomer)

# Register a new customer
Customer() OUT -> IN SplitCustomer(Split)

# Get the ID of the newly-created customer
'id' -> KEY GetCustomerId(GetObjectKey)
'customer' -> PROPERTY SetCustomerId(SetPropertyValue)
SplitCustomer() OUT -> IN GetCustomerId()
GetCustomerId() OUT -> VALUE SetCustomerId()

# When customer has been registered, charge him
SplitCustomer() OUT -> IN Charge(Kick)
Charge() OUT -> IN SetCustomerId()
SetCustomerId() OUT -> IN DoCharge()
DoCharge() OUT -> IN SplitCharge(Split)
SplitCharge() OUT -> IN ChargeDone(Repeat)

# Store the customer into CouchDB for later analysis
'http://localhost:5984/grid' -> URL StoreCustomer(couchdb/WriteDocument)
SplitCustomer() OUT -> IN StoreCustomer() OUT -> IN Display(Output)
StoreCustomer() LOG -> IN Display(Output)

# Store the charge into CouchDB for later analysis
'http://localhost:5984/grid' -> URL StoreCharge(couchdb/WriteDocument)
SplitCharge() OUT -> IN StoreCharge() OUT -> IN Display(Output)
StoreCharge() LOG -> IN Display(Output)

# Report to dashboard
'amount' -> KEY GetAmount(GetObjectKey)
SplitCharge() OUT -> IN GetAmount()
'hGPTkKDV7g0pEBKBVBJW0F45gYRvcyruffkzRqB1iTFHqoDAgH' -> TOKEN PushAmount(ducksboard/PushDelta)
'112371' -> ENDPOINT PushAmount()
GetAmount() OUT -> IN ConvertAmount(stripeapp/ConvertStripeAmount)
ConvertAmount() OUT -> IN PushAmount()
PushAmount() OUT -> IN DropPushed(Drop)
PushAmount() ERROR -> IN DropError(Drop)

# Error handling
DoCharge() ERROR -> IN Errors(Merge)
Customer() ERROR -> IN Errors()